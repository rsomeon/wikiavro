#!/usr/bin/env ruby

require 'wikiavro'
require 'optparse'

Version = WikiAvro::VERSION

logger = WikiAvro::MediaWiki::RevisionProgress.new 10000
overwrite = false
deflate = false
benchmark = false
xml_parser = nil
ns = nil
page = nil
rev = nil
lqt = nil

opt_parser = OptionParser.new do |opts|
  opts.banner = 'Usage: wikiavro [options] [INFILE]'

  opts.on('-q', '--quiet', "Don't report progress") do |v|
    logger = WikiAvro::MediaWiki::NoProgress.new
  end

  opts.on('-v LEVEL', '--verbose=LEVEL', Integer,
          'Report progress after every LEVEL revisions parsed') do |lvl|
    logger = WikiAvro::MediaWiki::RevisionProgress.new lvl.to_i
  end

  opts.on('-o', '--overwrite') do |o|
    overwrite = o
  end

  opts.on('-d', '--deflate', 'Enable Avro internal compression') do |d|
    deflate = d
  end

  opts.on('-n OUTFILE', '--namespaces=OUTFILE') do |path|
    ns = path
  end

  opts.on('-p OUTFILE', '--pages=OUTFILE') do |path|
    page = path
  end

  opts.on('-r OUTFILE', '--revisions=OUTFILE') do |path|
    rev = path
  end

  opts.on('-l OUTFILE', '--liquidthreads=OUTFILE') do |path|
    lqt = path
  end

  opts.on('-b', '--benchmark', "Don't write files, just parse XML") do |b|
    benchmark = b
  end

  opts.on('--xml-parser=NAME', "Override XML parser selection") do |p|
    xml_parser = p
  end
end

opt_parser.parse!

if !benchmark
  abort('You must specify --namespaces') if ns.nil?
  abort('You must specify --pages') if page.nil?
  abort('You must specify --revisions') if rev.nil?
  abort('You must specify --liquidthreads') if lqt.nil?
end

if !overwrite && !benchmark
  [ns, page, rev, lqt].each do |path|
    if File.exists? path
      abort("#{path} already exists! pass --overwrite to proceed anyway")
    end
  end
end

if !benchmark
  ns = WikiAvro::Avro::NamespaceWriter.new ns, deflate
  page = WikiAvro::Avro::PageWriter.new page, deflate
  rev = WikiAvro::Avro::RevisionWriter.new rev, deflate
  lqt = WikiAvro::Avro::LqtWriter.new lqt, deflate
else
  ns = WikiAvro::MediaWiki::NullWriter.new
  page = WikiAvro::MediaWiki::NullWriter.new
  rev = WikiAvro::MediaWiki::NullWriter.new
  lqt = WikiAvro::MediaWiki::NullWriter.new
end

writer = WikiAvro::MediaWiki::WikiWriter.new :logger => logger,
                                             :namespace => ns,
                                             :page => page,
                                             :revision => rev,
                                             :lqt => lqt

mw = WikiAvro::MediaWiki::WikiDump.new

$xml_reader = nil

def use_libxml
  require 'wikiavro/libxml'
  $xml_reader = WikiAvro::XML::LibXML::Reader
  puts 'Loaded LibXML.'
end

def use_aalto
  require 'wikiavro/aalto'
  $xml_reader = WikiAvro::XML::Aalto::Reader
  puts 'Loaded Aalto.'
end

def use_nokogiri
  require 'wikiavro/nokogiri'
  $xml_reader = WikiAvro::XML::Nokogiri::Reader
  puts "Loaded Nokogiri #{Nokogiri::VERSION}."
end

if !xml_parser
  begin
    use_libxml
  rescue LoadError
    begin
      puts 'Could not load Ruby LibXML. Falling back to Aalto.'
      use_aalto
    rescue LoadError
      puts 'Could not load Aalto. Falling back to Nokogiri.'
      puts 'Expect Nokogiri to have atrocious performance on jruby.'
      use_nokogiri
    end
  end
else
  case xml_parser
  when 'libxml'
    use_libxml
  when 'aalto'
    use_aalto
  when 'nokogiri'
    use_nokogiri
  else
    abort('Unknown XML parser!')
  end
end

begin
  mw.parse(writer, nil, $xml_reader.io(ARGF))
ensure
  ns.close
  page.close
  rev.close
  lqt.close
end
